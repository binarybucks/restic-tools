#! /bin/bash
set -uo pipefail

display_usage() {
	echo "Usage: $0 <repo> (<backup set>|monitor <host> <warning> <critical>|restic arguments)" >&2
}

if [ "$#" -lt 2 ]; then
	display_usage
    	exit 1
fi

TARGET=$1
ACTION=$2
RESTIC=$(which restic)
CURL=$(which curl)

check_config() {
	CONFIG=/etc/backup/$1.repo
	if [ ! -f $CONFIG ]; then
	    	echo "Repo config file $CONFIG not found!"
    	    	exit 1
	else
		set -a
		source $CONFIG
		set +a
        fi


	if [[ ! -x $RESTIC ]]; then
    		echo "Restic binary not found"
    		exit 1
	fi
}

handle_params () {
  CONFIG=/etc/backup/$2.config
  if [ -f $CONFIG ]; then
	  		do_backup $CONFIG
	elif [ $2 == "monitor" ]; then
		do_monitor $@
	else
		shift 1
		$RESTIC $@
        fi
}


do_backup () {
  CONFIG=$1
  PRE=${1%.config}.pre
  POST=${1%.config}.post
  EXCLUDE=${1%.config}.exclude
  
  if [ ! -f $CONFIG ]; then
          echo "backup config file $CONFIG not found!"
          exit 1
  fi

  if [ ! -f $EXCLUDE ]; then
          echo "backup exclude file $EXCLUDE not found!"
          exit 1
  fi

	. $CONFIG

	# define an empty default if BACKUP_ARGS is not set
	BACKUP_ARGS=${BACKUP_ARGS:-""}

  if [[ -x $PRE ]]; then
    $PRE $TARGET
 	fi

	$RESTIC --exclude-file $EXCLUDE backup --hostname $BACKUP_HOSTNAME $BACKUP_ARGS $BACKUP_DIR

        if [[ -x $POST ]]; then
                $POST $TARGET
	fi

	if [[ -n "${HEALTHCHECK_URL:-}" ]]; then
		if [[ -x $CURL ]]; then
			$CURL -fsS --retry 4 "$HEALTHCHECK_URL"  > /dev/null
		fi
	fi
}

do_monitor () {
	if [ $# -lt 5 ]; then
		display_usage
		exit 1;
	fi
	WARN=$4
	CRIT=$5

	# Get last line and parse into variables. Removes header and is empty when no snapshot exists for host
	LAST=`$RESTIC snapshots --compact --no-lock -H $3 | sed 1,2d | head -n -2 | tail -n 1`
	if [ ! $? -eq 0 ]; then
		echo "WARNING - restic command returned an error"
		exit 1;
	fi

	IFS=' ' read HASH DATE TIME HOST DIR <<< "$LAST"

	if [ -z "$HASH" ]; then
		echo "UNKNOWN - No snapshot found for $3"
		exit 4;
	fi


	# Compute time difference since last snapshot
	case $(uname -s) in
		Darwin)
			BACKUP_TST=$(date -j -f "%Y-%m-%d %H:%M:%S" "$DATE $TIME" "+%s")
			;;
		*)
			BACKUP_TST=$(date -d "$DATE $TIME" +"%s" )
			;;
	esac

	NOW_TST=$(date +%s)
	DIFF_S=`expr $NOW_TST - $BACKUP_TST`

	DIFF_H=`expr $DIFF_S / 3600`

	MESSAGE="Last snapshot #$HASH ${DIFF_H}h ago"
        RET=0
	RET_H="OK"

	if [ $DIFF_H -lt $WARN ]; then
		RET=0
		RET_H="OK"
	elif [ $DIFF_H -lt $CRIT ]; then
                RET=1
                RET_H="WARNING"
	else
                RET=2
                RET_H="CRITICAL"

	fi
	echo "$RET_H - $MESSAGE"
	return $RET
}

check_config $@
handle_params $@
